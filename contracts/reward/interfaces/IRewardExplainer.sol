// SPDX-License-Identifier: agpl-3.0
pragma solidity ^0.8.4;

interface IRewardExplainer {
  /// @dev provides in depth details about rewards of the holder. Accuracy of future projection is not guaranteed.
  /// @dev NB! explanation does not consider auto-locking
  /// @param at is a timestamp (current or future) to calculate rewards
  /// @return details of rewards, see RewardExplained
  function explainReward(address holder, uint32 at) external view returns (RewardExplained memory);
}

/// @dev details of rewards of a holder, please refer to tokenomics on reward calculations
struct RewardExplained {
  /// @dev total amount of rewards that will be claimed (including boost)
  uint256 amountClaimable;
  /// @dev total amount of rewards allocated to the holder but are frozen now
  uint256 amountExtra;
  /// @dev maximum possible amount of boost generated by xAGF
  uint256 maxBoost;
  /// @dev maximum allowed amount of boost based on work rewards (from deposits, debts, stakes etc)
  uint256 boostLimit;
  /// @dev timestamp of the latest claim
  uint32 latestClaimAt;
  /// @dev a list of pools currently generating rewards to the holder
  RewardExplainEntry[] allocations;
}

/// @dev details of reward generation by a reward pool
struct RewardExplainEntry {
  /// @dev amount of rewards generated by the reward pool since last update (see `since`)
  uint256 amount;
  /// @dev amount of rewards frozen by the reward pool
  uint256 extra;
  /// @dev address of the reward pool
  address pool;
  /// @dev timestamp of a last update of the holder in the reward pool (e.g. claim or balance change)
  uint32 since;
  /// @dev multiplication factor in basis points (10000=100%) to calculate boost limit by outcome of the pool
  uint32 factor;
  /// @dev type of reward pool: boost (added to the max boost) or work (added to the claimable amount and to the boost limit)
  RewardType rewardType;
}

enum RewardType {
  WorkReward,
  BoostReward
}
